<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.easyshare.dao.ViewDao">
    <resultMap id="viewMap" type="View">
        <id property="id" column="id"/>
        <result property="postId" column="post_id"/>
        <result property="userId" column="user_id"/>
        <result property="createdAt" column="created_at"/>
    </resultMap>

    <resultMap id="postVoMap" type="PostVo">
        <id property="id" column="id"/>
        <result property="content" column="content"/>
        <result property="authorId" column="author_id"/>
        <result property="author" column="username"/>
        <result property="avatar" column="avatar" />
        <result property="publishAt" column="publish_at"/>
        <result property="viewsCnt" column="views_cnt"/>
        <result property="likesCnt" column="likes_cnt"/>
        <result property="commentsCnt" column="comments_cnt"/>
        <result property="lastUpdate" column="last_update"/>
    </resultMap>

    <insert id="addView" parameterType="View" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `tb_view` (post_id, user_id, created_at)
        VALUES (#{postId}, #{userId}, #{createdAt});
    </insert>

    <select id="findLatestView" resultMap="viewMap">
        SELECT id, post_id, user_id, created_at
        FROM `tb_view`
        WHERE post_id = #{postId}
          AND user_id = #{userId}
        ORDER BY id DESC
        LIMIT 1
    </select>

    <select id="findRecentViewLog" resultMap="postVoMap">
        WITH v as (SELECT post_id,
                          MAX(created_at) latest_view_time
                   FROM `tb_view`
                   WHERE user_id = #{userId}
                     AND created_at BETWEEN DATE_SUB(NOW(), INTERVAL #{dayLimit} DAY) AND NOW()
                   GROUP BY post_id
                   ORDER BY latest_view_time DESC
                   LIMIT #{pageSize})
        SELECT v.post_id      id,
               p.content      content,
               p.author_id    author_id,
               u.username     username,
               u.avatar       avatar,
               p.publish_at   publish_at,
               p.views_cnt    views_cnt,
               p.likes_cnt    likes_cnt,
               p.comments_cnt comments_cnt,
               p.last_update  last_update
        FROM v
                 JOIN `tb_post` p ON v.post_id = p.id
                 JOIN `tb_user` u ON p.author_id = u.id
        WHERE p.is_deleted = 0
    </select>
</mapper>